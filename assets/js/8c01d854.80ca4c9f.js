"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6584],{4591:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>n,metadata:()=>i,toc:()=>h});var o=s(5893),r=s(1151);const n={title:"useResolvedPath",sidebar_position:void 0},a="useResolvedPath",i={id:"hooks/use-resolved-path",title:"useResolvedPath",description:"Type declaration",source:"@site/react-router/docs/hooks/use-resolved-path.md",sourceDirName:"hooks",slug:"/hooks/use-resolved-path",permalink:"/react-router-v6-searchable-docs/hooks/use-resolved-path",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1702657144,formattedLastUpdatedAt:"Dec 15, 2023",frontMatter:{title:"useResolvedPath"},sidebar:"tutorialSidebar",previous:{title:"unstable_usePrompt",permalink:"/react-router-v6-searchable-docs/hooks/use-prompt"},next:{title:"useRevalidator",permalink:"/react-router-v6-searchable-docs/hooks/use-revalidator"}},d={},h=[{value:"Splat Paths",id:"splat-paths",level:2},{value:"Behavior without the flag",id:"behavior-without-the-flag",level:3},{value:"Behavior with the flag",id:"behavior-with-the-flag",level:3}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"useresolvedpath",children:(0,o.jsx)(t.code,{children:"useResolvedPath"})}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Type declaration"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"declare function useResolvedPath(\n  to: To,\n  options?: { relative?: RelativeRoutingType }\n): Path;\n"})})]}),"\n",(0,o.jsxs)(t.p,{children:["This hook resolves the ",(0,o.jsx)(t.code,{children:"pathname"})," of the location in the given ",(0,o.jsx)(t.code,{children:"to"})," value against the pathname of the current location."]}),"\n",(0,o.jsxs)(t.p,{children:["This is useful when building links from relative values. For example, check out the source to ",(0,o.jsx)(t.a,{href:"../components/nav-link",children:(0,o.jsx)(t.code,{children:"<NavLink>"})})," which calls ",(0,o.jsx)(t.code,{children:"useResolvedPath"})," internally to resolve the full pathname of the page being linked to."]}),"\n",(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"../utils/resolve-path",children:"resolvePath"})," for more information."]}),"\n",(0,o.jsx)(t.h2,{id:"splat-paths",children:"Splat Paths"}),"\n",(0,o.jsxs)(t.p,{children:["The original logic for ",(0,o.jsx)(t.code,{children:"useResolvedPath"})," behaved differently for splat paths which in hindsight was incorrect/buggy behavior. This was fixed in ",(0,o.jsx)(t.a,{href:"https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v6190",children:(0,o.jsx)(t.code,{children:"6.19.0"})})," but it was determined that a large number of existing applications ",(0,o.jsx)(t.a,{href:"https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329",children:"relied on this behavior"})," so the fix was reverted in ",(0,o.jsx)(t.a,{href:"https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v6201",children:(0,o.jsx)(t.code,{children:"6.20.1"})})," and re-introduced in ",(0,o.jsx)(t.a,{href:"https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v6210",children:(0,o.jsx)(t.code,{children:"6.21.0"})})," behind a ",(0,o.jsx)(t.code,{children:"future.v7_relativeSplatPath"})," ",(0,o.jsx)(t.a,{href:"../guides/api-development-strategy",children:"future flag"}),". This will become the default behavior in React Router v7, so it is recommended to update your applications at your convenience to be better prepared for the eventual v7 upgrade."]}),"\n",(0,o.jsx)(t.p,{children:"It should be noted that this is the foundation for all relative routing in React Router, so this applies to the following relative path code flows as well:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"<Link to>"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useNavigate()"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useHref()"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"<Form action>"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useSubmit()"})}),"\n",(0,o.jsxs)(t.li,{children:["Relative path ",(0,o.jsx)(t.code,{children:"redirect"})," responses returned from loaders and actions"]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"behavior-without-the-flag",children:"Behavior without the flag"}),"\n",(0,o.jsxs)(t.p,{children:["When this flag is not enabled, the default behavior is that when resolving relative paths inside of a ",(0,o.jsxs)(t.a,{href:"../route/route#splats",children:["splat route (",(0,o.jsx)(t.code,{children:"*"}),")"]}),", the splat portion of the path is ignored. So, given a route tree such as:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<BrowserRouter>\n  <Routes>\n    <Route path="/dashboard/*" element={<Dashboard />} />\n  </Routes>\n</BrowserRouter>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["If you are currently at URL ",(0,o.jsx)(t.code,{children:"/dashboard/teams"}),", ",(0,o.jsx)(t.code,{children:'useResolvedPath("projects")'})," inside the ",(0,o.jsx)(t.code,{children:"Dashboard"})," component would resolve to ",(0,o.jsx)(t.code,{children:"/dashboard/projects"}),' because the "current" location we are relative to would be considered ',(0,o.jsx)(t.code,{children:"/dashboard"})," ",(0,o.jsx)(t.em,{children:'without the "teams" splat value'}),"."]}),"\n",(0,o.jsxs)(t.p,{children:['This makes for a slight convenience in routing between "sibling" splat routes (',(0,o.jsx)(t.code,{children:"/dashboard/teams"}),", ",(0,o.jsx)(t.code,{children:"/dashboard/projects"}),", etc.), however it causes other inconsistencies such as:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:'useResolvedPath(".")'}),' no longer resolves to the current location for that route, it actually resolved you "up" to ',(0,o.jsx)(t.code,{children:"/dashboard"})," from ",(0,o.jsx)(t.code,{children:"/dashboard/teams"})]}),"\n",(0,o.jsxs)(t.li,{children:["If you changed your route definition to use a dynamic parameter (",(0,o.jsx)(t.code,{children:'<Route path="/dashboard/:widget">'}),"), then any resolved paths inside the ",(0,o.jsx)(t.code,{children:"Dashboard"})," component would break since the dynamic param value is not ignored like the splat value"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"And then it gets worse if you define the splat route as a child:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<BrowserRouter>\n  <Routes>\n    <Route path="/dashboard">\n      <Route path="*" element={<Dashboard />} />\n    </Route>\n  </Routes>\n</BrowserRouter>\n'})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Now, ",(0,o.jsx)(t.code,{children:'useResolvedPath(".")'})," and ",(0,o.jsx)(t.code,{children:'useResolvedPath("..")'})," resolve to the exact same path inside ",(0,o.jsx)(t.code,{children:"<Dashboard />"})]}),"\n",(0,o.jsxs)(t.li,{children:["If you were using a Data Router and defined an ",(0,o.jsx)(t.code,{children:"action"})," on the splat route, you'd get a 405 error on ",(0,o.jsx)(t.code,{children:"<Form>"})," submissions inside ",(0,o.jsx)(t.code,{children:"<Dashboard>"})," because they (by default) submit to ",(0,o.jsx)(t.code,{children:'"."'})," which would resolve to the parent ",(0,o.jsx)(t.code,{children:"/dashboard"})," route which doesn't have an ",(0,o.jsx)(t.code,{children:"action"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"behavior-with-the-flag",children:"Behavior with the flag"}),"\n",(0,o.jsxs)(t.p,{children:['When you enable the flag, this "bug" is fixed so that path resolution is consistent across all route types, and ',(0,o.jsx)(t.code,{children:'useResolvedPath(".")'})," always resolves to the current pathname for the contextual route. This includes any dynamic param or splat param values."]}),"\n",(0,o.jsxs)(t.p,{children:['If you want to navigate between "sibling" routes within a splat route, it is suggested you move your splat route to it\'s own child and use ',(0,o.jsx)(t.code,{children:'useResolvedPath("../teams")'})," and ",(0,o.jsx)(t.code,{children:'useResolvedPath("../projects")'})," parent-relative paths to navigate to sibling ",(0,o.jsx)(t.code,{children:"/dashboard"})," routes. Note that here we also use ",(0,o.jsx)(t.code,{children:"index"})," so that the URL ",(0,o.jsx)(t.code,{children:"/dashboard"})," also renders the ",(0,o.jsx)(t.code,{children:"<Dashboard>"})," component."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<BrowserRouter>\n  <Routes>\n    <Route path="/dashboard">\n      <Route index path="*" element={<Dashboard />} />\n    </Route>\n  </Routes>\n</BrowserRouter>\n'})})]})}function c(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>i,a:()=>a});var o=s(7294);const r={},n=o.createContext(r);function a(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);