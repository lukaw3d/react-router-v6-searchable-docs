"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9649],{4910:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(5893),o=n(1151);const s={title:"resolvePath",sidebar_position:void 0},a="resolvePath",i={id:"utils/resolve-path",title:"resolvePath",description:"Type declaration",source:"@site/react-router/docs/utils/resolve-path.md",sourceDirName:"utils",slug:"/utils/resolve-path",permalink:"/react-router-v6-searchable-docs/utils/resolve-path",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1656601621,formattedLastUpdatedAt:"Jun 30, 2022",frontMatter:{title:"resolvePath"},sidebar:"tutorialSidebar",previous:{title:"renderMatches",permalink:"/react-router-v6-searchable-docs/utils/render-matches"},next:{title:"Guides",permalink:"/react-router-v6-searchable-docs/guides/index"}},c={},l=[];function h(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"resolvepath",children:(0,r.jsx)(t.code,{children:"resolvePath"})}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Type declaration"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"declare function resolvePath(\n  to: To,\n  fromPathname?: string\n): Path;\n\ntype To = string | Partial<Path>;\n\ninterface Path {\n  pathname: string;\n  search: string;\n  hash: string;\n}\n"})})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"resolvePath"})," resolves a given ",(0,r.jsx)(t.code,{children:"To"})," value into an actual ",(0,r.jsx)(t.code,{children:"Path"})," object with an absolute ",(0,r.jsx)(t.code,{children:"pathname"}),". This is useful whenever you need to know the exact path for a relative ",(0,r.jsx)(t.code,{children:"To"})," value. For example, the ",(0,r.jsx)(t.code,{children:"<Link>"})," component uses this function to know the actual URL it points to."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsxs)(t.a,{href:"../hooks/use-resolved-path",children:[(0,r.jsx)(t.code,{children:"useResolvedPath"})," hook"]})," uses ",(0,r.jsx)(t.code,{children:"resolvePath"})," internally to resolve the pathname. If ",(0,r.jsx)(t.code,{children:"to"})," contains a pathname, it is resolved against the current route pathname. Otherwise, it is resolved against the current URL (",(0,r.jsx)(t.code,{children:"location.pathname"}),")."]})]})}function d(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var r=n(7294);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);