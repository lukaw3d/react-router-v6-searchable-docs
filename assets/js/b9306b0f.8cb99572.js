"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7034],{5712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var a=n(5893),s=n(1151);const r={title:"useMatches",new:!0,sidebar_position:void 0},o="useMatches",c={id:"hooks/use-matches",title:"useMatches",description:"Returns the current route matches on the page. This is most useful for creating abstractions in parent layouts to get access to their child route's data.",source:"@site/react-router/docs/hooks/use-matches.md",sourceDirName:"hooks",slug:"/hooks/use-matches",permalink:"/react-router-v6-searchable-docs/hooks/use-matches",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1675253624,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{title:"useMatches",new:!0},sidebar:"tutorialSidebar",previous:{title:"useMatch",permalink:"/react-router-v6-searchable-docs/hooks/use-match"},next:{title:"useNavigate",permalink:"/react-router-v6-searchable-docs/hooks/use-navigate"}},h={},d=[{value:"Breadcrumbs",id:"breadcrumbs",level:2}];function i(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"usematches",children:(0,a.jsx)(t.code,{children:"useMatches"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the current route matches on the page. This is most useful for creating abstractions in parent layouts to get access to their child route's data."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'import { useMatches } from "react-router-dom";\n\nfunction SomeComponent() {\n  const matches = useMatches();\n  // [match1, match2, ...]\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["A ",(0,a.jsx)(t.code,{children:"match"})," has the following shape:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"{\n  // route id\n  id,\n\n  // the portion of the URL the route matched\n  pathname,\n\n  // the data from the loader\n  data,\n\n  // the parsed params from the URL\n  params,\n\n  // the <Route handle> with any app specific data\n  handle,\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Pairing ",(0,a.jsx)(t.code,{children:"<Route handle>"})," with ",(0,a.jsx)(t.code,{children:"useMatches"})," gets very powerful since you can put whatever you want on a route ",(0,a.jsx)(t.code,{children:"handle"})," and have access to ",(0,a.jsx)(t.code,{children:"useMatches"})," anywhere."]}),"\n",(0,a.jsxs)("docs-warning",{children:[(0,a.jsx)(t.code,{children:"useMatches"})," only works with a data router like ",(0,a.jsx)(t.a,{href:"../routers/create-browser-router",children:(0,a.jsx)(t.code,{children:"createBrowserRouter"})}),", since they know the full route tree up front and can provide all of the current matches. Additionally, ",(0,a.jsx)(t.code,{children:"useMatches"})," will not match down into any descendant route trees since the router isn't aware of the descendant routes."]}),"\n",(0,a.jsx)(t.h2,{id:"breadcrumbs",children:"Breadcrumbs"}),"\n",(0,a.jsx)(t.p,{children:"The proverbial use case here is adding breadcrumbs to a parent layout that uses data from the child routes."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"filename=app.jsx",children:'<Route element={<Root />}>\n  <Route\n    path="messages"\n    element={<Messages />}\n    loader={loadMessages}\n    handle={{\n      // you can put whatever you want on a route handle\n      // here we use "crumb" and return some elements,\n      // this is what we\'ll render in the breadcrumbs\n      // for this route\n      crumb: () => <Link to="/messages">Messages</Link>,\n    }}\n  >\n    <Route\n      path="conversation/:id"\n      element={<Thread />}\n      loader={loadThread}\n      handle={{\n        // `crumb` is your own abstraction, we decided\n        // to make this one a function so we can pass\n        // the data from the loader to it so that our\n        // breadcrumb is made up of dynamic content\n        crumb: (data) => <span>{data.threadName}</span>,\n      }}\n    />\n  </Route>\n</Route>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Now we can create a ",(0,a.jsx)(t.code,{children:"Breadcrumbs"})," component that takes advantage of our home-grown ",(0,a.jsx)(t.code,{children:"crumb"})," abstraction with ",(0,a.jsx)(t.code,{children:"useMatches"})," and ",(0,a.jsx)(t.code,{children:"handle"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"filename=components/breadcrumbs.jsx",children:"function Breadcrumbs() {\n  let matches = useMatches();\n  let crumbs = matches\n    // first get rid of any matches that don't have handle and crumb\n    .filter((match) => Boolean(match.handle?.crumb))\n    // now map them into an array of elements, passing the loader\n    // data to each one\n    .map((match) => match.handle.crumb(match.data));\n\n  return (\n    <ol>\n      {crumbs.map((crumb, index) => (\n        <li key={index}>{crumb}</li>\n      ))}\n    </ol>\n  );\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Now you can render ",(0,a.jsx)(t.code,{children:"<Breadcrumbs/>"})," anywhere you want, probably in the root component."]})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>o});var a=n(7294);const s={},r=a.createContext(s);function o(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);