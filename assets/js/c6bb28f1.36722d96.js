"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5325],{4126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=n(5893),s=n(1151);const i={title:"useNavigate",sidebar_position:void 0},a="useNavigate",r={id:"hooks/use-navigate",title:"useNavigate",description:"Type declaration",source:"@site/react-router/docs/hooks/use-navigate.md",sourceDirName:"hooks",slug:"/hooks/use-navigate",permalink:"/react-router-v6-searchable-docs/hooks/use-navigate",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1701794153,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{title:"useNavigate"},sidebar:"tutorialSidebar",previous:{title:"useMatches",permalink:"/react-router-v6-searchable-docs/hooks/use-matches"},next:{title:"useNavigationType",permalink:"/react-router-v6-searchable-docs/hooks/use-navigation-type"}},c={},l=[{value:"<code>options.replace</code>",id:"optionsreplace",level:2},{value:"<code>options.state</code>",id:"optionsstate",level:2},{value:"<code>options.preventScrollReset</code>",id:"optionspreventscrollreset",level:2},{value:"<code>options.relative</code>",id:"optionsrelative",level:2},{value:"<code>options.unstable_flushSync</code>",id:"optionsunstable_flushsync",level:2},{value:"<code>options.unstable_viewTransition</code>",id:"optionsunstable_viewtransition",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"usenavigate",children:(0,o.jsx)(t.code,{children:"useNavigate"})}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Type declaration"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'declare function useNavigate(): NavigateFunction;\n\ninterface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\ninterface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n  unstable_viewTransition?: boolean;\n}\n\ntype RelativeRoutingType = "route" | "path";\n'})})]}),"\n",(0,o.jsxs)("docs-warning",{children:["It's usually better to use ",(0,o.jsx)(t.a,{href:"../fetch/redirect",children:(0,o.jsx)(t.code,{children:"redirect"})})," in ",(0,o.jsx)(t.a,{href:"../route/loader",children:(0,o.jsx)(t.code,{children:"loaders"})})," and ",(0,o.jsx)(t.a,{href:"../route/action",children:(0,o.jsx)(t.code,{children:"actions"})})," than this hook"]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"useNavigate"})," hook returns a function that lets you navigate programmatically, for example in an effect:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { useNavigate } from "react-router-dom";\n\nfunction useLogoutTimer() {\n  const userIsInactive = useFakeInactiveUser();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (userIsInactive) {\n      fake.logout();\n      navigate("/session-timed-out");\n    }\n  }, [userIsInactive]);\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"navigate"})," function has two signatures:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Either pass a ",(0,o.jsx)(t.code,{children:"To"})," value (same type as ",(0,o.jsx)(t.code,{children:"<Link to>"}),") with an optional second ",(0,o.jsx)(t.code,{children:"options"})," argument (similar to the props you can pass to ",(0,o.jsx)(t.a,{href:"../components/link",children:(0,o.jsx)(t.code,{children:"<Link>"})}),"), or"]}),"\n",(0,o.jsxs)(t.li,{children:["Pass the delta you want to go in the history stack. For example, ",(0,o.jsx)(t.code,{children:"navigate(-1)"})," is equivalent to hitting the back button"]}),"\n"]}),"\n",(0,o.jsxs)("docs-info",{children:["Please see the ",(0,o.jsx)(t.a,{href:"../hooks/use-resolved-path#splat-paths",children:"Splat Paths"})," section on the ",(0,o.jsx)(t.code,{children:"useResolvedPath"})," docs for a note on the behavior of the ",(0,o.jsx)(t.code,{children:"future.v7_relativeSplatPath"})," future flag for relative ",(0,o.jsx)(t.code,{children:"useNavigate()"})," behavior within splat routes"]}),"\n",(0,o.jsx)(t.h2,{id:"optionsreplace",children:(0,o.jsx)(t.code,{children:"options.replace"})}),"\n",(0,o.jsxs)(t.p,{children:["Specifying ",(0,o.jsx)(t.code,{children:"replace: true"})," will cause the navigation to replace the current entry in the history stack instead of adding a new one."]}),"\n",(0,o.jsx)(t.h2,{id:"optionsstate",children:(0,o.jsx)(t.code,{children:"options.state"})}),"\n",(0,o.jsxs)(t.p,{children:["You may include an optional ",(0,o.jsx)(t.code,{children:"state"})," value to store in ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/History/state",children:"history state"}),", which you can then access on the destination route via ",(0,o.jsx)(t.a,{href:"../hooks/use-location",children:(0,o.jsx)(t.code,{children:"useLocation"})}),". For example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'navigate("/new-route", { state: { key: "value" } });\n'})}),"\n",(0,o.jsx)(t.h2,{id:"optionspreventscrollreset",children:(0,o.jsx)(t.code,{children:"options.preventScrollReset"})}),"\n",(0,o.jsxs)(t.p,{children:["When using the ",(0,o.jsx)(t.a,{href:"../components/scroll-restoration",children:(0,o.jsx)(t.code,{children:"<ScrollRestoration>"})})," component, you can disable resetting the scroll to the top of the page via ",(0,o.jsx)(t.code,{children:"options.preventScrollReset"})]}),"\n",(0,o.jsx)(t.h2,{id:"optionsrelative",children:(0,o.jsx)(t.code,{children:"options.relative"})}),"\n",(0,o.jsxs)(t.p,{children:["By default, navigation is relative to the route hierarchy (",(0,o.jsx)(t.code,{children:'relative: "route"'}),"), so ",(0,o.jsx)(t.code,{children:".."})," will go up one ",(0,o.jsx)(t.code,{children:"Route"})," level. Occasionally, you may find that you have matching URL patterns that do not make sense to be nested, and you'd prefer to use relative ",(0,o.jsx)(t.em,{children:"path"})," routing. You can opt into this behavior with ",(0,o.jsx)(t.code,{children:'relative: "path"'}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'// Contact and EditContact do not share additional UI layout\n<Route path="/" element={<Layout />}>\n  <Route path="contacts/:id" element={<Contact />} />\n  <Route\n    path="contacts/:id/edit"\n    element={<EditContact />}\n  />\n</Route>;\n\nfunction EditContact() {\n  // Since Contact is not a parent of EditContact we need to go up one level\n  // in the path, instead of one level in the Route hierarchy\n  navigate("..", { relative: "path" });\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"optionsunstable_flushsync",children:(0,o.jsx)(t.code,{children:"options.unstable_flushSync"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"unstable_flushSync"})," option tells React Router DOM to wrap the initial state update for this navigation in a ",(0,o.jsx)(t.a,{href:"https://react.dev/reference/react-dom/flushSync",children:(0,o.jsx)(t.code,{children:"ReactDOM.flushSync"})})," call instead of the default ",(0,o.jsx)(t.a,{href:"https://react.dev/reference/react/startTransition",children:(0,o.jsx)(t.code,{children:"React.startTransition"})}),". This allows you to perform synchronous DOM actions immediately after the update is flushed to the DOM."]}),"\n",(0,o.jsxs)("docs-warning",{children:[(0,o.jsx)(t.code,{children:"unstable_flushSync"})," only works when using a data router, see ",(0,o.jsx)(t.a,{href:"../routers/picking-a-router",children:"Picking a Router"})]}),"\n",(0,o.jsx)("docs-warning",{children:"Please note that this API is marked unstable and may be subject to breaking changes without a major release"}),"\n",(0,o.jsx)(t.h2,{id:"optionsunstable_viewtransition",children:(0,o.jsx)(t.code,{children:"options.unstable_viewTransition"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"unstable_viewTransition"})," option enables a ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API",children:"View Transition"})," for this navigation by wrapping the final state update in ",(0,o.jsx)(t.code,{children:"document.startViewTransition()"}),". If you need to apply specific styles for this view transition, you will also need to leverage the ",(0,o.jsx)(t.a,{href:"../hooks//use-view-transition-state",children:(0,o.jsx)(t.code,{children:"unstable_useViewTransitionState()"})}),"."]}),"\n",(0,o.jsxs)("docs-warning",{children:[(0,o.jsx)(t.code,{children:"unstable_viewTransition"})," only works when using a data router, see ",(0,o.jsx)(t.a,{href:"../routers/picking-a-router",children:"Picking a Router"})]}),"\n",(0,o.jsx)("docs-warning",{children:"Please note that this API is marked unstable and may be subject to breaking changes without a major release"})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>a});var o=n(7294);const s={},i=o.createContext(s);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);